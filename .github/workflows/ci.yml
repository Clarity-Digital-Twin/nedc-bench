name: CI

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10', '3.11']
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/uv
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install UV (Unix)
      if: runner.os != 'Windows'
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install UV (Windows)
      if: runner.os == 'Windows'
      run: |
        irm https://astral.sh/uv/install.ps1 | iex
        echo "$env:USERPROFILE\.cargo\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install dependencies
      run: |
        uv pip install --system -e ".[dev]"

    - name: Lint with ruff
      run: |
        make lint

    - name: Type check with mypy
      run: |
        make typecheck

    - name: Run tests with coverage
      run: |
        pytest -q --cov=nedc_bench --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  parity:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install numpy scipy lxml tomli
        pip install -e .

    - name: Run parity validation
      run: |
        python scripts/compare_parity.py > parity_report.txt
        cat parity_report.txt

    - name: Check parity snapshot
      run: |
        python -c "
import json
import sys

with open('SSOT_ALPHA.json') as f:
    alpha = json.load(f)
with open('SSOT_BETA.json') as f:
    beta = json.load(f)

# Check exact parity for key metrics
for algo in ['taes', 'epoch', 'dp']:
    if algo in alpha and algo in beta:
        alpha_tp = alpha[algo].get('tp', 0)
        beta_tp = beta[algo].get('tp', 0)
        if abs(alpha_tp - beta_tp) > 0.01:
            print(f'PARITY FAILURE: {algo} TP mismatch: {alpha_tp} vs {beta_tp}')
            sys.exit(1)

# Special check for IRA kappa
if 'ira' in alpha and 'ira' in beta:
    alpha_kappa = alpha['ira']['multi_class_kappa']
    beta_kappa = beta['ira']['multi_class_kappa']
    if abs(alpha_kappa - beta_kappa) > 0.0001:
        print(f'PARITY FAILURE: IRA kappa mismatch: {alpha_kappa} vs {beta_kappa}')
        sys.exit(1)

print('✓ Parity check passed!')
"

    - name: Upload parity report
      uses: actions/upload-artifact@v4
      with:
        name: parity-report
        path: parity_report.txt

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, parity]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Generate release notes
      run: |
        echo "## Parity v6.0.0 Release" > release_notes.md
        echo "" >> release_notes.md
        echo "✓ All 5 algorithms achieve exact parity with NEDC v6.0.0" >> release_notes.md
        echo "✓ FA/24h computation centralized and validated" >> release_notes.md
        echo "✓ Comprehensive test coverage (>80%)" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Parity Results" >> release_notes.md
        echo '```' >> release_notes.md
        python scripts/compare_parity.py >> release_notes.md
        echo '```' >> release_notes.md

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          parity_report.txt
          SSOT_ALPHA.json
          SSOT_BETA.json
        body_path: release_notes.md
